注: 版权 @2025 W4-snake-wz 作者。保留所有权利。

引入 "数学/随机数"
引入 "门阀/瓦力四像门"

常量·寸长 = 8

常量:
	透明 = 0
	亮色 = 1
	主色 = 2
	副色 = 3
	暗色 = 4
完毕

全局:
	饿死鬼   = 贪吃蛇{}
	游戏帧数 = 0
	食物位置 = 点{X: 80, Y: 80}

	食物图像   = []字节{0x00, 0xa0, 0x02, 0x00, 0x0e, 0xf0, 0x36, 0x5c, 0xd6, 0x57, 0xd5, 0x57, 0x35, 0x5c, 0x0f, 0xf0}
	进食的声音 = 声音{140, 20, 4, 10, 0, 0, 0, 0, 2}
完毕

结构·声音:
	频率1: 正整
	频率2: 正整
	起音:  正整
	衰减:  正整
	持续:  正整
	释音:  正整
	音量:  正整
	声道:  正整
	模式:  正整
完毕

函数·声音·播放:
	频率 := 我的·频率1 | 我的·频率2<<16
	时长 := 我的·起音<<24 | 我的·衰减<<16 | 我的·持续 | 我的·释音<<8
	标志位 := 我的·声道 | 我的·模式<<2

	瓦力四像门·播放声音(整型(频率), 整型(时长), 整型(我的·音量), 整型(标志位))
完毕

函数·处理输入():
	游戏按键 := 瓦力四像门·读取控制键1()

	如果 游戏按键&瓦力四像门·按键1 != 0:
		饿死鬼·休眠 = 真
	完毕
	如果 游戏按键&瓦力四像门·按键2 != 0:
		饿死鬼·休眠 = 假
	完毕

	如果 游戏按键&瓦力四像门·向上键 != 0:
		饿死鬼·往上游动()
	完毕
	如果 游戏按键&瓦力四像门·向下键 != 0:
		饿死鬼·往下游动()
	完毕
	如果 游戏按键&瓦力四像门·向左键 != 0:
		饿死鬼·往左游动()
	完毕
	如果 游戏按键&瓦力四像门·向右键 != 0:
		饿死鬼·往右游动()
	完毕
完毕

#凹:导出 start
函数·启动游戏:
	瓦力四像门·写调试板(
		(0xfb<<16)|(0xf7<<8)|(0xf3), // R: 0xfb, G: 0xf7, B: 0xf3
		(0xe5<<16)|(0xb0<<8)|(0x83), // R: 0xe5, G: 0xb0, B: 0x83
		(0x42<<16)|(0x6e<<8)|(0x5d), // R: 0x42, G: 0x6e, B: 0x5d
		(0x20<<16)|(0x28<<8)|(0x3d), // R: 0x20, G: 0x28, B: 0x3d
	)
	饿死鬼·重生()
完毕

#凹:导出 update
函数·更新游戏状态:
	处理输入()

	游戏帧数++

	如果 游戏帧数%10 == 0:
		饿死鬼·更新()
		如果 饿死鬼·死了吗():
			饿死鬼·重生()
		完毕

		如果 饿死鬼·蛇身[0] == 食物位置:
			饿死鬼·蛇身 = 追加(饿死鬼·蛇身, 饿死鬼·蛇身[长度(饿死鬼·蛇身)-1])
			食物位置·X = 微正整(随机数·范围内整数(20) * 寸长)
			食物位置·Y = 微正整(随机数·范围内整数(20) * 寸长)
			进食的声音·播放()
		完毕
	完毕
	饿死鬼·美图秀秀()

	瓦力四像门·设置绘图颜色(亮色, 主色, 副色, 暗色)
	瓦力四像门·位图块传输(食物图像, 整型(食物位置·X), 整型(食物位置·Y), 寸长, 寸长, 瓦力四像门·每像素2位)
完毕

结构·点:
	X: 微正整
	Y: 微正整
完毕

结构·游走方向:
	X: 整型
	Y: 整型
完毕

结构·贪吃蛇:
	蛇身:     []点
	游走方向: 游走方向
	休眠:     布尔
完毕

函数·贪吃蛇·重生:
	我的·蛇身 = []点{
		{X: 寸长 * 2, Y: 0},
		{X: 寸长, Y: 0},
		{X: 0, Y: 0},
	}
	我的·游走方向 = 游走方向{X: 寸长, Y: 0}
完毕

函数·贪吃蛇·美图秀秀:
	瓦力四像门·设置绘图颜色(副色, 暗色, 副色, 暗色)

	循环 _, 几寸 := 迭代 我的·蛇身:
		瓦力四像门·画矩形(整型(几寸·X), 整型(几寸·Y), 寸长, 寸长)
	完毕

	瓦力四像门·设置绘图颜色(暗色, 透明, 副色, 暗色)

	蛇头 := 我的·蛇身[0]
	瓦力四像门·画矩形(整型(蛇头·X), 整型(蛇头·Y), 寸长, 寸长)
完毕

函数·贪吃蛇·更新:
	如果 我的·休眠:
		返回
	完毕

	循环 几寸 := 长度(我的·蛇身) - 1; 几寸 > 0; 几寸--:
		我的·蛇身[几寸] = 我的·蛇身[几寸-1]
	完毕

	我的·蛇身[0]·X = 微正整((整型(我的·蛇身[0]·X) + 我的·游走方向·X) % 160)
	我的·蛇身[0]·Y = 微正整((整型(我的·蛇身[0]·Y) + 我的·游走方向·Y) % 160)

	如果 我的·蛇身[0]·X > 160:
		我的·蛇身[0]·X = 160 - 寸长
	完毕
	如果 我的·蛇身[0]·Y > 160:
		我的·蛇身[0]·Y = 160 - 寸长
	完毕
完毕

函数·贪吃蛇·往上游动:
	如果 我的·休眠:
		返回
	完毕
	如果 我的·游走方向·Y == 0:
		我的·游走方向·X, 我的·游走方向·Y = 0, -寸长
	完毕
完毕

函数·贪吃蛇·往下游动:
	如果 我的·休眠:
		返回
	完毕
	如果 我的·游走方向·Y == 0:
		我的·游走方向·X, 我的·游走方向·Y = 0, 寸长
	完毕
完毕

函数·贪吃蛇·往左游动:
	如果 我的·休眠:
		返回
	完毕
	如果 我的·游走方向·X == 0:
		我的·游走方向·X, 我的·游走方向·Y = -寸长, 0
	完毕
完毕

函数·贪吃蛇·往右游动:
	如果 我的·休眠:
		返回
	完毕
	如果 我的·游走方向·X == 0:
		我的·游走方向·X, 我的·游走方向·Y = 寸长, 0
	完毕
完毕

函数·贪吃蛇·死了吗 => 布尔:
	循环 几寸 := 1; 几寸 < 长度(我的·蛇身); 几寸++:
		如果 我的·蛇身[0] == 我的·蛇身[几寸]:
			返回 真
		完毕
	完毕
	返回 假
完毕
